// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobManagerServiceClient is the client API for JobManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagerServiceClient interface {
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jobManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagerServiceClient(cc grpc.ClientConnInterface) JobManagerServiceClient {
	return &jobManagerServiceClient{cc}
}

func (c *jobManagerServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/llmoperator.job_manager.server.v1.JobManagerService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerServiceClient) ListJobs(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.job_manager.server.v1.JobManagerService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/llmoperator.job_manager.server.v1.JobManagerService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagerServiceServer is the server API for JobManagerService service.
// All implementations must embed UnimplementedJobManagerServiceServer
// for forward compatibility
type JobManagerServiceServer interface {
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	ListJobs(context.Context, *ListJobRequest) (*ListJobsResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedJobManagerServiceServer()
}

// UnimplementedJobManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagerServiceServer struct {
}

func (UnimplementedJobManagerServiceServer) CreateJob(context.Context, *CreateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobManagerServiceServer) ListJobs(context.Context, *ListJobRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedJobManagerServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedJobManagerServiceServer) mustEmbedUnimplementedJobManagerServiceServer() {}

// UnsafeJobManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagerServiceServer will
// result in compilation errors.
type UnsafeJobManagerServiceServer interface {
	mustEmbedUnimplementedJobManagerServiceServer()
}

func RegisterJobManagerServiceServer(s grpc.ServiceRegistrar, srv JobManagerServiceServer) {
	s.RegisterService(&JobManagerService_ServiceDesc, srv)
}

func _JobManagerService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.job_manager.server.v1.JobManagerService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagerService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.job_manager.server.v1.JobManagerService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).ListJobs(ctx, req.(*ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagerService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.job_manager.server.v1.JobManagerService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobManagerService_ServiceDesc is the grpc.ServiceDesc for JobManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmoperator.job_manager.server.v1.JobManagerService",
	HandlerType: (*JobManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobManagerService_CreateJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _JobManagerService_ListJobs_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobManagerService_DeleteJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/job_manager_service.proto",
}
